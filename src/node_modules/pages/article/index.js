import React,{useEffect, useContext, useState} from 'react'
import {Link, Redirect} from 'react-router-dom'

import useFetch from 'hooks/useFetch'

import Loading from 'components/loading'
import ErrorMessage from 'components/errorMessage'
import TagList from 'components/tagList'

import {currentUserContext} from 'contexts/currentUser'

const Article = ({match:{params:{slug}}}) => {
    const [{isLoading: fetchArticleIsLoading,response: fetchArticleResponse, error: fetchArticleError}, doFetch] = useFetch(`/articles/${slug}`)
    const [{response: deleteArticleResponse}, doDeleteArticle] = useFetch(`/articles/${slug}`)

    const [{isLoggedIn, currentUser}] = useContext(currentUserContext);

    const [isSuccessfullDelete, setIsSuccessfullDelete] = useState(false);
    
    useEffect(() => {
       doFetch()
    }, [doFetch]);

    useEffect(() => {
        
        if(!deleteArticleResponse) return;

        setIsSuccessfullDelete(true)

    }, [deleteArticleResponse]);

    if(isSuccessfullDelete){
        return <Redirect to="/" />
    }

    const isAuthor = () => {
        if(!fetchArticleResponse || !isLoggedIn) return false
        return fetchArticleResponse.article.author.username === currentUser.username
    }

    const deleteArticle = () => {
        doDeleteArticle({
            method: 'delete'
        })
    }

    return (
        <div className="article-page">
            <div className="banner">
{!fetchArticleIsLoading && fetchArticleResponse && (
    <div className="container">
        <h1>{fetchArticleResponse.article.title}</h1>
        <div className="article-meta">
            <Link to={`/profiles/${fetchArticleResponse.article.author.username}`}>
                <img src={fetchArticleResponse.article.author.image} alt="img"/>
            </Link>
            <div className="info">
            <Link to={`/profiles/${fetchArticleResponse.article.author.username}`}>
                {fetchArticleResponse.article.author.username}
            </Link>
            <span className="date">{fetchArticleResponse.article.createdAt}</span>
            </div>
            {isAuthor() && (
                <span>
                    <Link className="btn btn-outline-secondary btn-small"
                     to={`/articles/${fetchArticleResponse.article.slug}/edit`}>
                         <i className="ion-edit"></i>
                         Edit erticle
                    </Link>

                    <button className="btn btn-small btn-outline-danger"
                    onClick={deleteArticle}
                    style={{marginLeft: "8px"}}>
                        <i className="ion-trash-a"></i>
                        Delete article
                    </button>
                </span>
            )}
        </div>
    </div>
)}
            </div>

            <div className="container page">
             {fetchArticleIsLoading && <Loading />}
    {fetchArticleError && <ErrorMessage />}
    {!fetchArticleIsLoading && fetchArticleResponse && (
        <div className="row article-content">
            <div className="col-xs-12">
                <div>
                    <p>{fetchArticleResponse.article.body}</p>
                </div>
                <TagList tags={fetchArticleResponse.article.tagList}/>
            </div>
        </div>
    )}
            </div>
        </div>
    )
}

export default Article
