import React, {useState, useEffect, useContext} from 'react'
import {Link, Redirect} from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {currentUserContext} from 'contexts/currentUser'

import BackendErrorMessages from 'components/BackendErrorMessages'

const Authentication = ({location:{pathname}}) => {
  // Проверки на какой из страниц мы находимся
  const isLoginPage = pathname === '/login'
  const pageHeader = isLoginPage ? 'Sign in' : 'Sign up'
  const descriptionLink = isLoginPage ? '/register' : 'login'
  const descriptionText = isLoginPage ? 'Need an account?' : 'Have an account?'
  const apiUrl = isLoginPage ? '/users/login' :'/users'

  // состояния
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');

  //Вызовы хуков
  const [inSuccessfulSubmit, setInSuccessfulSubmit] = useState(false);
  const [{isLoading,response,error}, doFetch] = useFetch(apiUrl)
  const [, setToken] = useLocalStorage('token');

  // Консекст
  const [, dispatch] = useContext(currentUserContext);

  const handleSubmit = (e) => {
    e.preventDefault();

    const user = isLoginPage ? {email, password} : {email, password, username }
    
    doFetch({
      method: 'post',
      data: {
        user
      }})

    }

    useEffect(() => {
      if(!response) return;

      setToken(response.user.token)

      setInSuccessfulSubmit(true)

      dispatch({type: 'SET_AUTHORIZED', payload: response.user})

    }, [response, setToken, dispatch]);

    if(inSuccessfulSubmit){
      return <Redirect to="/" />
    }

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">{pageHeader}</h1>
            <p className="text-xs-center">
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            <form onSubmit={handleSubmit}>
            {error && <BackendErrorMessages backendErrors={error.errors} />}
              <fieldset>
              {!isLoginPage && <fieldset className="form-group">
                  <input
                    type="text"
                    className="form-control form-control-lg"
                    placeholder="Username"
                    value={username}
                    onChange={({target: {value}}) => setUsername(value)}
                  />
                </fieldset>}
                <fieldset className="form-group">
                  <input
                    type="email"
                    className="form-control form-control-lg"
                    placeholder="Email"
                    value={email}
                    onChange={({target: {value}}) => setEmail(value)}
                  />
                </fieldset>
                <fieldset className="form-group">
                  <input
                    type="password"
                    className="form-control form-control-lg"
                    placeholder="Password"
                    value={password}
                    onChange={({target: {value}}) => setPassword(value)}
                  />
                </fieldset>
                
                <button
                  className="btn btn-lg btn-primary pull-xs-right"
                  type="submit"
                  disabled={isLoading}
                >
                  {pageHeader}
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Authentication
