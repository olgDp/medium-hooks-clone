import React, {useContext, useEffect, useState} from 'react'

import {currentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'components/BackendErrorMessages'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import { Redirect } from 'react-router-dom'

const UserSettings = () => {
    const [{response, error}, doFetch] = useFetch('/user')
    const [, setToken] = useLocalStorage('token')

    const [{isLoggedIn, currentUser}, dispatch] = useContext(currentUserContext)

    const [image, setImage] = useState('')
    const [username, setUsername] = useState('')
    const [bio, setBio] = useState('')
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')

    useEffect(() => {
        if(!currentUser) return

          const {bio, email, username, image} = currentUser;
          
          setImage(image || 'https://dummyimage.com/100x100/000/fff&text=ololo')
          setUsername(username)
          setBio(bio || '')
          setEmail(email)
          
    }, [currentUser]);

    useEffect(() => {
        if(!response) return;

        dispatch({type: 'SET_AUTHORIZED', payload: response.user})
    }, [response, dispatch]);

    const handleSubmit = (e) => {
        e.preventDefault();

        doFetch({
            method: 'put',
            data: {
                user: {
                    ...currentUser,
                    bio,
                    email, 
                    username, 
                    image,
                    password
                }
            }
        })
    }

    const logoutHandler = (e) => {
        e.preventDefault();

        setToken('')
        dispatch({type: 'LOGOUT'})

    }

    if (!isLoggedIn) {
        return <Redirect to="/" />
    }

    return (
        <div className="settings-page">
            <div className="container page">
                <div className="row">
                    <div className="col-md-6 offset-md-3 col-xs-12">
                        <h1 className="text-xs-center">User settings</h1>
                        {error && <BackendErrorMessages backendErrors={error.errors}/>}
                        <form onSubmit={handleSubmit}>
                            <fieldset>
                                <fieldset className="form-group">
                                    <input value={image} onChange={( {target: {value}} ) => setImage(value)} type="text" className="form-control form-control-lg" placeholder="url for profile picture"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input value={username} onChange={( {target: {value}} ) => setUsername(value)}  type="text" className="form-control form-control-lg" placeholder="Username"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <textarea value={bio} onChange={( {target: {value}} ) => setBio(value)}  rows="8" className="form-control form-control-lg" placeholder="Short bio about you"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input value={email} onChange={( {target: {value}} ) => setEmail(value)}  type="email" className="form-control form-control-lg" placeholder="Email"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input value={password} onChange={( {target: {value}} ) => setPassword(value)}  type="password" className="form-control form-control-lg" placeholder="New password"/>
                                </fieldset>
                                <button type="submit" className="btn btn-lg btn-primary pull-xs-right">Update settings</button>
                            </fieldset>
                        </form>
                            <hr/>
                            <button className="btn btn-outline-danger" onClick={logoutHandler}>Logout</button>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default UserSettings
