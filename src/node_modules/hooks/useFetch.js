import {useState, useEffect, useCallback} from 'react';
import axios from 'axios'

import useLocalStorage from 'hooks/useLocalStorage'

export default (url) => {
    const [isLoading, setIsLoading] = useState(false);
    const [response, setResponse] = useState(null);
    const [error, setError] = useState(null);

    const [token] = useLocalStorage('token')

    const [options, setOptions] = useState({});

    const doFetch = useCallback((options={}) => {
        setOptions(options)
        setIsLoading(true)
    }, [])

       useEffect(() => {
         let skipGetResponseAfterDestroy = false;

           if (!isLoading) {return}

           const requestOptions = {
            ...options,
              headers: {
                authorization: token ? `Token ${token}` : ''
              }
          }

        axios(`https://conduit.productionready.io/api${url}`, requestOptions
          ).then(res => {
            if (!skipGetResponseAfterDestroy) {
              setIsLoading(false);
            setResponse(res.data)
            }
          }).catch(err=>{
            if (!skipGetResponseAfterDestroy) {
              setIsLoading(false);
            setError(err.response.data)
            }
          })

          return () => {
            skipGetResponseAfterDestroy = true
          }

       }, [isLoading, url, options, token]); 
    

    return [{isLoading,response,error}, doFetch]
};

